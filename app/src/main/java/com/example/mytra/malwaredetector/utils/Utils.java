package com.example.mytra.malwaredetector.utils;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.renderscript.Sampler;
import android.util.Log;

import com.example.mytra.malwaredetector.R;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.StringTokenizer;

/**
 * Created by My Tra on 06/12/2017.
 */

public class Utils {
    public static ArrayList<Permission> listPermission;
    public static int numTransactions;
    static ArrayList<String> transaction= new ArrayList<>();
    public static ArrayList<Application> listApp = new ArrayList<>();

    public static File genTransaction(Context context, String imei){
        PackageManager pm = context.getPackageManager();
        File item = null;
        List<PackageInfo> info = pm.getInstalledPackages(PackageManager.GET_PERMISSIONS);
       // Log.e("MyLu", info.toString()); [PackageInfo{c05a0c8 com.mobeam.barcodeService}


        int count;
        listPermission = getListPermission(context);
        try {
            File dirctory =getDirectory();
            item = new File(dirctory, "transaction_"+imei+".txt");
            PrintWriter pw = new PrintWriter(item);

            // check list Package Information of all app in smartphone.
            for (PackageInfo pi : info){
                long start=0, end=0;
                start = System.currentTimeMillis();

                //get list permission has text form from an application
                String[] permission = pi.requestedPermissions;

                StringBuilder sb = new StringBuilder();
                String packet = pi.packageName;
                int k = 0;
                if(permission != null && permission.length>0){
                    pw.print(packet+":");
                    for(String s : permission) {
                        if (getID(listPermission, s) != -1) {
                            sb.append(getID(listPermission, s) + " ");
                            pw.print(getID(listPermission, s) + " ");
                        }
                    }
                        if(sb.length()>0){
                            transaction.add(sb.toString());
                        }
                        end = System.currentTimeMillis();
                        pw.print(":"+(end-start));
                        pw.println();
                }

                Application app = new Application(convertStringToArray(sb.toString()),packet); // Application(int[] listpermission, string name)
                if(listApp.contains(app)== false){
                    listApp.add(app);
                }
            }
            pw.close();
        } catch (Exception ex){}
        numTransactions = transaction.size();

        // sort items in transaction
        Collections.sort(listApp, new Comparator<Application>() {

            @Override
            public int compare(Application o1, Application o2) {
                int[] arr1 = o1.getListPermission();
                int arr2[] = o2.getListPermission();
                if (arr1.length < arr2.length) return -1;
                if (arr1.length > arr2.length) return 1;
                return arr1.length - arr2.length;
            }
        });
        return item;
    }

    // map list_permission.txt to ArrayList of Permission Object;
    public static ArrayList<Permission> getListPermission(Context context) {
        int count = 0;
        ArrayList<Permission> list = new ArrayList<>();
        Permission permission;

        try {
            InputStream is = context.getResources().openRawResource(R.raw.list_permission);
            BufferedReader bfr = new BufferedReader(new InputStreamReader(is));
            String line;
                while ((line = bfr.readLine()) != null) {
                    permission = new Permission(++count,line);
                    list.add(permission);
                }
            } catch (IOException e) {
            e.printStackTrace();
        }
        return list;
    }

    public static void run(Context context, String id) throws FileNotFoundException,
            IOException {
        genTransaction(context, id);
    }

    /**
     * create Directory to store file transaction;
     */
    public static File getDirectory(){
        File root = android.os.Environment.getExternalStorageDirectory();
        File directory = new File(root.getAbsolutePath()+File.separator+ "MalwareDetector");
        if (!directory.exists()){
            directory.mkdir();
        }
        return directory;
    }

    //Get ID of scanned permission based on ArrayList of Permission Object
    public static int getID(ArrayList<Permission > list, String value){
        for(Permission p : list){
            if(p.getName().equals(value)){
                return p.getId();
            }
        }
        return -1;
    }
    public static int[] convertStringToArray(String s){
        StringTokenizer st = new StringTokenizer(s, " ");
        int arr[] = new int[st.countTokens()];
        int count = 0;
        while (st.hasMoreTokens())
            arr[count++] = Integer.parseInt(st.nextToken());
        Arrays.sort(arr);
        return arr;
    }
}
